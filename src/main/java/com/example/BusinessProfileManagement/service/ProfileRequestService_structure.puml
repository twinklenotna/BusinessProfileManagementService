@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "com.example.BusinessProfileManagement",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": true,
    "cutInterfaceStructures": true,
    "cutDataStructures": true,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "com.example.BusinessProfileManagement.service.ProfileRequestService",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline


'nodes
subgraph cluster_1322970774 {
   	label=example
	labeljust=l
	fillcolor="#ececec"
	style=filled

   subgraph cluster_143566664 {
   	label=BusinessProfileManagement
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled

   ProfileRequestService1420382690[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ProfileRequestService</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   businessProfileMapper: BusinessProfileMapper [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   businessProfilePatchRequestMapper: BusinessProfilePatchRequestMapper [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   businessProfileRequestMapper: BusinessProfileRequestMapper [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   businessProfileRequestRepository: BusinessProfileRequestRepository [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   businessProfileRequestResponseMapper: BusinessProfileRequestResponseMapper [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   logger: Logger [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   profileProductValidationService: ProfileProductValidationService [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" ># createBusinessProfileRequest(profile: BusinessProfilePatchRequest, requestType: RequestType, subscriptions: Set&lt;String&gt;): BusinessProfileUpdateRequest</TD></TR>
<TR><TD ALIGN="LEFT" >+ getProfileUpdateRequest(requestId: String): BusinessProfileRequestResponse</TD></TR>
<TR><TD ALIGN="LEFT" >+ getProfileUpdateRequestsByprofileId(profileId: String): List&lt;BusinessProfileUpdateRequest&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ updateBusinessProfileRequestEntity(businessProfileUpdateRequest: BusinessProfileUpdateRequest): BusinessProfileRequestEntity</TD></TR>
<TR><TD ALIGN="LEFT" >+ updateRequestStatus(request: BusinessProfileUpdateRequest, status: ApprovalStatus)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
}
}

'edges


}
@enduml